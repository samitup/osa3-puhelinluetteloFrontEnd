{"version":3,"sources":["components/Filter.js","components/PersonForm.js","services/persons.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","props","value","filterInputValue","onChange","filterInputChangeFn","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","baseUrl","axios","get","newObject","post","id","put","delete","Persons","name","map","person","key","number","onClick","onDeleteClick","Notification","message","messageColor","className","App","hook","console","log","personService","then","response","setPersons","data","useEffect","useState","persons","setNewName","setNewNumber","nameToCompare","setNameToCompare","setMessage","setMessageColor","namesToShow","filter","toUpperCase","includes","event","target","preventDefault","exists","some","createdPerson","concat","catch","error","setTimeout","personUpdate","find","window","confirm","updatedPerson","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b19dc239.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter with <input value={props.filterInputValue} onChange={props.filterInputChangeFn} />\r\n        </div>\r\n    )\r\n}\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.addPerson}>\r\n            <div>\r\n                name: <input value={props.newName} onChange={props.handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input value={props.newNumber} onChange={props.handleNumberChange} /></div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default PersonForm","import axios from 'axios'\r\n\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll =  () => {\r\n    return axios.get(baseUrl)\r\n \r\n}\r\n\r\nconst create =  newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n  \r\n}\r\nconst remove =(id) => {\r\n    return( axios.delete(`${baseUrl}/${id}`) \r\n    )\r\n}\r\n\r\nconst update = (id,newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default {getAll,create,update,remove}","  \r\nimport React from 'react';\r\nconst Persons = (props) => {\r\n    return (\r\n    \r\n        <div>\r\n                    { props.name.map( person =>\r\n                        <li key={ person.id }>\r\n                            { person.name } { person.number } <button onClick={ ()=> { props.onDeleteClick( person.id )} }>Delete</button>\r\n                        </li> \r\n                    ) }\r\n                    </div>\r\n             \r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react';\r\n\r\nconst Notification = ({ message, messageColor }) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n        return(\r\n            <div className={messageColor}>\r\n            {message}\r\n        </div>\r\n        )\r\n    }\r\n  \r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Filter from './components/Filter'\r\nimport PersonForm from './components/PersonForm'\r\nimport personService from './services/persons'\r\nimport Persons from './components/Persons'\r\nimport Notification from './components/Notification'\r\n\r\n\r\nconst App = () => {\r\n\r\n    const hook = () => {\r\n        console.log('effect')\r\n        personService.getAll()\r\n            .then(response => {\r\n                console.log('promise fulfilled')\r\n                setPersons(response.data)\r\n            })\r\n\r\n    }\r\n    useEffect(hook, [])\r\n\r\n    const [persons, setPersons] = useState([\r\n        {\r\n            name: 'Arto Hellas',\r\n            number: '045-050192',\r\n        }\r\n    ])\r\n\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [nameToCompare, setNameToCompare] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n    const [messageColor, setMessageColor] = useState('')\r\n\r\n    const handleFilterInputChange = (event) => {\r\n        setNameToCompare(event.target.value)\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        const exists = persons.some(person => (person.name === newName));\r\n        const personObject = {\r\n            name: newName,\r\n            number: newNumber,\r\n            id: newName\r\n        }\r\n\r\n        if (exists === false) {\r\n            personService\r\n                .create(personObject)\r\n                .then(createdPerson => {\r\n                    setPersons(persons.concat(createdPerson.data))\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.response.data)\r\n                    setMessageColor(\"red\")\r\n                    setMessage(`${error.response.data.error}`)\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n            setNewName('')\r\n            setNewNumber('')\r\n            setMessageColor(\"green\")\r\n            setMessage(\r\n                `${newName} successfully added to phonebook!`)\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            }, 5000)\r\n\r\n        }\r\n\r\n        const personUpdate = persons.find(person => person.name === newName)\r\n\r\n        if (exists === true) {\r\n            if (window.confirm(`${newName} is already in the phonebook, would you like to update the number?`)) {\r\n                const updatedPerson = { ...personUpdate, number: newNumber }\r\n\r\n                personService\r\n                    .update(updatedPerson.id, updatedPerson)\r\n                    .then(result => {\r\n                        setPersons(persons.map(person => person.id !== updatedPerson.id ? person : updatedPerson))\r\n                    }).then(response => response.data)\r\n            }\r\n            setNewName('')\r\n            setNewNumber('')\r\n            setMessageColor(\"green\")\r\n            setMessage(\r\n                `${newName} successfully updated to phonebook!`)\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            }, 5000)\r\n        }\r\n\r\n    }\r\n    const deletePerson = id => {\r\n        let name = persons.find(person => person.id === id).name\r\n\r\n        if (window.confirm(`Delete person \"${name}\" ?`)) {\r\n            personService\r\n                .remove(id)\r\n                .then(hook)\r\n                .catch(error => {\r\n                    error = `${name} already deleted from server, try to refresh`\r\n                    setMessageColor(\"red\")\r\n                    setMessage(error)\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n            setMessageColor(\"green\")\r\n            setMessage(`${name} successfully deleted from phonebook! `)\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            }, 5000)\r\n        }\r\n\r\n    }\r\n\r\n    const namesToShow = nameToCompare ? persons.filter(person => person.name.toUpperCase().includes(nameToCompare.toUpperCase()) === true) : persons;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Phonebook</h1>\r\n            <Notification message={message} messageColor={messageColor}></Notification>\r\n            <Filter filterInputValue={nameToCompare} filterInputChangeFn={handleFilterInputChange} />\r\n            <h1>Add a new</h1>\r\n            <div>\r\n                <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\r\n            </div>\r\n            <h1>Names  -  Numbers</h1>\r\n            <div>\r\n                {console.log(namesToShow)}\r\n                <Persons name={namesToShow} onDeleteClick={deletePerson}></Persons>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}